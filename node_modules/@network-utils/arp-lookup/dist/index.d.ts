/// <reference types="node" />
import { isIP } from 'net';
export interface IArpTableRow {
    ip: string;
    mac: string;
    type: 'static' | 'dynamic' | 'unknown';
}
export type IArpTable = IArpTableRow[];
/**
 * Checks if a MAC address is valid
 * @param mac The MAC address to validate
 */
export declare const isMAC: (mac: string) => boolean;
/**
 * Checks if a MAC address prefix is valid
 * @param prefix The prefix to validate
 */
export declare const isPrefix: (prefix: string) => boolean;
/**
 * Retrieves the networks' arp table
 */
export declare function getTable(): Promise<IArpTable>;
/**
 * Gets the MAC address for the given `ip` address
 * @param ip The IP address
 */
export declare function toMAC(ip: string): Promise<string | null>;
/**
 * Gets the IP address for given `mac` address
 * @param mac The MAC address
 */
export declare function toIP(mac: string): Promise<string | null>;
/**
 * Returns all devices on the network with
 * the specified MAC prefix
 * @param prefix the prefix to search for
 */
export declare function fromPrefix(prefix: string): Promise<IArpTableRow[]>;
export declare function isType(type: IArpTableRow['type'] | 'undefined', address: string): Promise<boolean>;
declare const _default: {
    fromPrefix: typeof fromPrefix;
    getTable: typeof getTable;
    isType: typeof isType;
    isIP: typeof isIP;
    isMAC: (mac: string) => boolean;
    isPrefix: (prefix: string) => boolean;
    toIP: typeof toIP;
    toMAC: typeof toMAC;
};
export default _default;
